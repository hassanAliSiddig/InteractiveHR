'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="InteractiveHRTask")>  _
Partial Public Class InteractiveHRDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDepartment(instance As Department)
    End Sub
  Partial Private Sub UpdateDepartment(instance As Department)
    End Sub
  Partial Private Sub DeleteDepartment(instance As Department)
    End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertVacation(instance As Vacation)
    End Sub
  Partial Private Sub UpdateVacation(instance As Vacation)
    End Sub
  Partial Private Sub DeleteVacation(instance As Vacation)
    End Sub
  Partial Private Sub InsertVacationStatus(instance As VacationStatus)
    End Sub
  Partial Private Sub UpdateVacationStatus(instance As VacationStatus)
    End Sub
  Partial Private Sub DeleteVacationStatus(instance As VacationStatus)
    End Sub
  Partial Private Sub InsertVacationType(instance As VacationType)
    End Sub
  Partial Private Sub UpdateVacationType(instance As VacationType)
    End Sub
  Partial Private Sub DeleteVacationType(instance As VacationType)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("InteractiveHRTaskConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Departments() As System.Data.Linq.Table(Of Department)
		Get
			Return Me.GetTable(Of Department)
		End Get
	End Property
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property Vacations() As System.Data.Linq.Table(Of Vacation)
		Get
			Return Me.GetTable(Of Vacation)
		End Get
	End Property
	
	Public ReadOnly Property VacationStatus() As System.Data.Linq.Table(Of VacationStatus)
		Get
			Return Me.GetTable(Of VacationStatus)
		End Get
	End Property
	
	Public ReadOnly Property VacationTypes() As System.Data.Linq.Table(Of VacationType)
		Get
			Return Me.GetTable(Of VacationType)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Departments")>  _
Partial Public Class Department
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _Employees As EntitySet(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Employees = New EntitySet(Of Employee)(AddressOf Me.attach_Employees, AddressOf Me.detach_Employees)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Department_Employee", Storage:="_Employees", ThisKey:="Id", OtherKey:="DepartmentId")>  _
	Public Property Employees() As EntitySet(Of Employee)
		Get
			Return Me._Employees
		End Get
		Set
			Me._Employees.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.Department = Me
	End Sub
	
	Private Sub detach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.Department = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employees")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _FullName As String
	
	Private _Email As String
	
	Private _Phone As String
	
	Private _DepartmentId As System.Nullable(Of Integer)
	
	Private _Salary As Integer
	
	Private _JobTitle As String
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _ProfilePicture As String
	
	Private _Vacations As EntitySet(Of Vacation)
	
	Private _Department As EntityRef(Of Department)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnDepartmentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartmentIdChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    Partial Private Sub OnJobTitleChanging(value As String)
    End Sub
    Partial Private Sub OnJobTitleChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnProfilePictureChanging(value As String)
    End Sub
    Partial Private Sub OnProfilePictureChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vacations = New EntitySet(Of Vacation)(AddressOf Me.attach_Vacations, AddressOf Me.detach_Vacations)
		Me._Department = CType(Nothing, EntityRef(Of Department))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentId", DbType:="Int")>  _
	Public Property DepartmentId() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentId
		End Get
		Set
			If (Me._DepartmentId.Equals(value) = false) Then
				If Me._Department.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDepartmentIdChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentId = value
				Me.SendPropertyChanged("DepartmentId")
				Me.OnDepartmentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary", DbType:="Int NOT NULL")>  _
	Public Property Salary() As Integer
		Get
			Return Me._Salary
		End Get
		Set
			If ((Me._Salary = value)  _
						= false) Then
				Me.OnSalaryChanging(value)
				Me.SendPropertyChanging
				Me._Salary = value
				Me.SendPropertyChanged("Salary")
				Me.OnSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobTitle", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property JobTitle() As String
		Get
			Return Me._JobTitle
		End Get
		Set
			If (String.Equals(Me._JobTitle, value) = false) Then
				Me.OnJobTitleChanging(value)
				Me.SendPropertyChanging
				Me._JobTitle = value
				Me.SendPropertyChanged("JobTitle")
				Me.OnJobTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfilePicture", DbType:="NVarChar(MAX)")>  _
	Public Property ProfilePicture() As String
		Get
			Return Me._ProfilePicture
		End Get
		Set
			If (String.Equals(Me._ProfilePicture, value) = false) Then
				Me.OnProfilePictureChanging(value)
				Me.SendPropertyChanging
				Me._ProfilePicture = value
				Me.SendPropertyChanged("ProfilePicture")
				Me.OnProfilePictureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Vacation", Storage:="_Vacations", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property Vacations() As EntitySet(Of Vacation)
		Get
			Return Me._Vacations
		End Get
		Set
			Me._Vacations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Department_Employee", Storage:="_Department", ThisKey:="DepartmentId", OtherKey:="Id", IsForeignKey:=true, DeleteRule:="SET NULL")>  _
	Public Property Department() As Department
		Get
			Return Me._Department.Entity
		End Get
		Set
			Dim previousValue As Department = Me._Department.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Department.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Department.Entity = Nothing
					previousValue.Employees.Remove(Me)
				End If
				Me._Department.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Employees.Add(Me)
					Me._DepartmentId = value.Id
				Else
					Me._DepartmentId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Department")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Vacations(ByVal entity As Vacation)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_Vacations(ByVal entity As Vacation)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vacations")>  _
Partial Public Class Vacation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _StartDate As Date
	
	Private _EndDate As Date
	
	Private _VacationTypeId As System.Nullable(Of Integer)
	
	Private _Reason As String
	
	Private _IsPaid As Boolean
	
	Private _StatusId As System.Nullable(Of Integer)
	
	Private _Employee As EntityRef(Of Employee)
	
	Private _VacationStatus As EntityRef(Of VacationStatus)
	
	Private _VacationType As EntityRef(Of VacationType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnVacationTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVacationTypeIdChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    Partial Private Sub OnIsPaidChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsPaidChanged()
    End Sub
    Partial Private Sub OnStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		Me._VacationStatus = CType(Nothing, EntityRef(Of VacationStatus))
		Me._VacationType = CType(Nothing, EntityRef(Of VacationType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime NOT NULL")>  _
	Public Property EndDate() As Date
		Get
			Return Me._EndDate
		End Get
		Set
			If ((Me._EndDate = value)  _
						= false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationTypeId", DbType:="Int")>  _
	Public Property VacationTypeId() As System.Nullable(Of Integer)
		Get
			Return Me._VacationTypeId
		End Get
		Set
			If (Me._VacationTypeId.Equals(value) = false) Then
				If Me._VacationType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVacationTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._VacationTypeId = value
				Me.SendPropertyChanged("VacationTypeId")
				Me.OnVacationTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPaid", DbType:="Bit NOT NULL")>  _
	Public Property IsPaid() As Boolean
		Get
			Return Me._IsPaid
		End Get
		Set
			If ((Me._IsPaid = value)  _
						= false) Then
				Me.OnIsPaidChanging(value)
				Me.SendPropertyChanging
				Me._IsPaid = value
				Me.SendPropertyChanged("IsPaid")
				Me.OnIsPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int")>  _
	Public Property StatusId() As System.Nullable(Of Integer)
		Get
			Return Me._StatusId
		End Get
		Set
			If (Me._StatusId.Equals(value) = false) Then
				If Me._VacationStatus.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._StatusId = value
				Me.SendPropertyChanged("StatusId")
				Me.OnStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Vacation", Storage:="_Employee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.Vacations.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vacations.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VacationStatus_Vacation", Storage:="_VacationStatus", ThisKey:="StatusId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property VacationStatus() As VacationStatus
		Get
			Return Me._VacationStatus.Entity
		End Get
		Set
			Dim previousValue As VacationStatus = Me._VacationStatus.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VacationStatus.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VacationStatus.Entity = Nothing
					previousValue.Vacations.Remove(Me)
				End If
				Me._VacationStatus.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vacations.Add(Me)
					Me._StatusId = value.Id
				Else
					Me._StatusId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("VacationStatus")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VacationType_Vacation", Storage:="_VacationType", ThisKey:="VacationTypeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property VacationType() As VacationType
		Get
			Return Me._VacationType.Entity
		End Get
		Set
			Dim previousValue As VacationType = Me._VacationType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VacationType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VacationType.Entity = Nothing
					previousValue.Vacations.Remove(Me)
				End If
				Me._VacationType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vacations.Add(Me)
					Me._VacationTypeId = value.Id
				Else
					Me._VacationTypeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("VacationType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VacationStatus")>  _
Partial Public Class VacationStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Vacations As EntitySet(Of Vacation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vacations = New EntitySet(Of Vacation)(AddressOf Me.attach_Vacations, AddressOf Me.detach_Vacations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VacationStatus_Vacation", Storage:="_Vacations", ThisKey:="Id", OtherKey:="StatusId")>  _
	Public Property Vacations() As EntitySet(Of Vacation)
		Get
			Return Me._Vacations
		End Get
		Set
			Me._Vacations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Vacations(ByVal entity As Vacation)
		Me.SendPropertyChanging
		entity.VacationStatus = Me
	End Sub
	
	Private Sub detach_Vacations(ByVal entity As Vacation)
		Me.SendPropertyChanging
		entity.VacationStatus = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VacationTypes")>  _
Partial Public Class VacationType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _IstPaidByDefault As Boolean
	
	Private _MaximumNumberOfDays As System.Nullable(Of Integer)
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _Vacations As EntitySet(Of Vacation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIstPaidByDefaultChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIstPaidByDefaultChanged()
    End Sub
    Partial Private Sub OnMaximumNumberOfDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaximumNumberOfDaysChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vacations = New EntitySet(Of Vacation)(AddressOf Me.attach_Vacations, AddressOf Me.detach_Vacations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IstPaidByDefault", DbType:="Bit NOT NULL")>  _
	Public Property IstPaidByDefault() As Boolean
		Get
			Return Me._IstPaidByDefault
		End Get
		Set
			If ((Me._IstPaidByDefault = value)  _
						= false) Then
				Me.OnIstPaidByDefaultChanging(value)
				Me.SendPropertyChanging
				Me._IstPaidByDefault = value
				Me.SendPropertyChanged("IstPaidByDefault")
				Me.OnIstPaidByDefaultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaximumNumberOfDays", DbType:="Int")>  _
	Public Property MaximumNumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._MaximumNumberOfDays
		End Get
		Set
			If (Me._MaximumNumberOfDays.Equals(value) = false) Then
				Me.OnMaximumNumberOfDaysChanging(value)
				Me.SendPropertyChanging
				Me._MaximumNumberOfDays = value
				Me.SendPropertyChanged("MaximumNumberOfDays")
				Me.OnMaximumNumberOfDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VacationType_Vacation", Storage:="_Vacations", ThisKey:="Id", OtherKey:="VacationTypeId")>  _
	Public Property Vacations() As EntitySet(Of Vacation)
		Get
			Return Me._Vacations
		End Get
		Set
			Me._Vacations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Vacations(ByVal entity As Vacation)
		Me.SendPropertyChanging
		entity.VacationType = Me
	End Sub
	
	Private Sub detach_Vacations(ByVal entity As Vacation)
		Me.SendPropertyChanging
		entity.VacationType = Nothing
	End Sub
End Class
